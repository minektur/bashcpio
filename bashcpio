#!/bin/bash

pkg=$1
if [ "$pkg" = "" -o ! -e "$pkg" ]; then
    echo "no package supplied" 1>&2
    exit 1
fi

#pointer to beginning of current file to be extracted
current_base=0
#some other globals 
declare -i filesize
declare -i namesize

# get_chunk(skipbytes, chunklen, [savefile])
#    return value in get_chunk_return or saved into savefile
#    if savefile is specified
#    note the use of the global current_base - points to the current file record
#    so that this code can be used on any file in the archive
get_chunk_return=""
get_chunk () {
    local skp
    local siz
    local file
    declare -i skp=$1+$current_base
    siz=$2
    file=$3
    if [ "$3"x != 'x' ]; then
        file=" of=$3 "
    else
        file=""
    fi
    get_chunk_return=`dd if="$pkg" count=$siz skip=$skp $file bs=1 2>/dev/null`
}

# save_file(namesize, fname, flength )
#     saves the current file, sets perms, owners?
save_file () {
    local sb
    local dir
    local namesize
    local fname
    local flength
    namesize=$1
    fname=$2
    flength=$3

    # header size = 13*8  + 6 
    #  + filenamesize (including 1 null byte)
    declare -i sb=110+$namesize
    #  + as many nulls as needed for length to be a multiple of 4
    sb=$sb+$sb%4
    #skipping sb bytes will get us to beginning of actual file contents

    # replace dirname with something stupid and complicated later using
    #   only builtins... maybe
    dir=`dirname $fname`
    mkdir -p $dir
    #TODO: chroot here maybe, or some hokey sanitization of path name
    echo "Extracting: $fname"
    get_chunk $sb $flength $fname
    #TODO: set owner, mode (use mask?), mtime
}

# read header of current record using fixed offsets
#   set a bunch of global variables
read_header () {
    # dont bother getting header fields we dont need
    get_chunk 0   6; magic=$get_chunk_return
    #get_chunk 6   8; ino=$get_chunk_return
    get_chunk 14  8; mode=$get_chunk_return
    get_chunk 22  8; uid=$get_chunk_return
    get_chunk 30  8; gid=$get_chunk_return
    #get_chunk 38  8; nlink=$get_chunk_return
    get_chunk 46  8; mtime=$get_chunk_return
    get_chunk 54  8; filesize=0x$get_chunk_return
    #get_chunk 62  8; devmajor=$get_chunk_return
    #get_chunk 70  8; devmajor=$get_chunk_return
    #get_chunk 78  8; rdevminor=$get_chunk_return
    #get_chunk 86  8; rdevminor=$get_chunk_return
    get_chunk 94  8;  namesize=0x$get_chunk_return
    #get_chunk 102 8; check=$get_chunk_return
    get_chunk 110 $namesize; fname=$get_chunk_return

    declare -i fileperm
    fileperm=0x${mode:5}
    printf "mode: %o fileperm: $fileperm\n" "$mode"
    exit
}

check_magic () {
    if [ $magic != "070701" ] && [ $magic != "070702" ] ; then
        echo "Invalid header - not a cpio archive?"
        exit 1
    fi
    return 0
}

###############################################################




read_header

check_magic
if [ $? -ne 0 ]; then
    echo "invalid header, exiting"
    exit 1
fi


# is it linkcount or filesize that indicates hard links?  
#  TODO handle either case

exit

#based on mode we need to extract a file, a fifo, a directory, etc.  Probably not support device files?
save_file $namesize $fname $filesize

