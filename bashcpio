#!/bin/bash

#pointer to beginning of current file to be extracted
declare -i current_base=0
#some other (integer) globals 
declare -i filesize
declare -i namesize
declare -i fileperm
declare -i filetype
declare -i mtime
declare pkg
declare tmpfile

# parse command line, make temp file from input stream if no package given
#  since we can only operate on real files.  Print usage if user gives 
#  any command line args
cmd_line () {
    while (( "$#" )); do
        if [[ "$1" = "-"* ]];  then
            echo "Commandline options not supported.  operating in -idvu mode"
            echo " In other words, extract into directories, overwrite, and print names"
            echo " Usage:  bashcpio < archive "
            echo "         rpm2cpio.sh foo.rpm | bashcpio"
            echo "         bashcpio archive"
            exit 1
        else 
            pkg="$1"
        fi
        shift
    done

    # remember that we made temp file so we can remove it at exit later
    if [ x"$pkg" = "x" ]; then
         pkg=./bashcpio.tmp.$RANDOM
         tmpfile="x"
         dd > $pkg  2>/dev/null
    fi

    # does it exist and can we read it?
    if [ ! -r "$pkg" ]; then
        echo "No such file: $pkg"
        exit
    fi
}


# get_chunk(skipbytes, chunklen, [savefile])
#    return value in get_chunk_return or saved into savefile
#    if savefile is specified
#    note the use of the global current_base - points to the current file record
#    so that this code can be used on any file in the archive
declare get_chunk_return=""
get_chunk () {
    local skp
    local siz
    local file
    declare -i skp="$1"+"$current_base"
    siz="$2"
    file="$3"

    # write to file if specified, else write to stdout 
    if [ x"$3" != "x" ]; then
        file=" of=$3 "
    else
        file=""
    fi
    get_chunk_return=`dd if="$pkg" count=$siz skip=$skp $file iflag=count_bytes,skip_bytes 2>/dev/null`
}

# extractor for a file in an archive
# extract_file(namesize, fname, flength )
#     saves the current file, sets perms, uid,gid ,mtime, if possible
extract_file () {
    local sb
    local dir
    local namesize
    local fname
    local flength
    local ds
    namesize=$1
    fname=$2
    flength=$3

    #sb bytes (skipped) will now get us to beginning of file contents
    # header size = 13*8  + 6  + filenamesize (including 1 null byte)
    #  + null padding to make the whole thing be a multiple of 4
    sb=$(( 110 + $namesize ))
    sb=$(( $sb + (( 4 - ( $sb % 4 )) % 4 ) ))


    # TODO replace dirname with something stupid and complicated later
    #   using only builtins... maybe
    dir=`dirname $fname`
    #TODO: umask on dir creation?
    mkdir -p "$dir"
    echo "x: $fname"

    #TODO: chroot here maybe, or some sanitization of path name 
    get_chunk "$sb" "$flength" "$fname"

    #only works if running as root - silently ignore errors
    chown "$uid":"$gid" "$fname" > /dev/null 2>&1
    chmod "$fileperm" "$fname" 
    
    #convert epoch time to yyyymmddhhmm.ss for touch TODO: timezone?
    ds=$( date -d @$mtime +%Y%m%d%H%M.%S )
    touch -c -m -t "$ds" "$fname"
}

# extractor for a directory in an archive
# extract_dir( $dirname )
#  extracts directory and sets perms, uid, gid, mtime if possible
extract_dir () {
    dirname="$1"
    mkdir -p "$dirname"
    #only works if running as root - silently ignore errors
    chown "$uid":"$gid" "$dirname" > /dev/null 2>&1
    chmod "$fileperm" "$dirname"

    #convert epoch time to yyyymmddhhmm.ss for touch TODO: timezone?
    # may not be worth doing - writing a file to this dir later will
    # update mtime - only makes a difference if this comes after all
    # files that go inside it in the archive.

    ds=$( date -d @$mtime +%Y%m%d%H%M.%S )
    touch -c -m -t "$ds" "$dirname"
}

# read header of current record using fixed offsets
#   set a bunch of global variables
read_header () {
    #grab what should be the whole header (not including variable filename)
    get_chunk 0   110; rec=$get_chunk_return


    # validate magic immediately to minimize the possiblity of wierd failure 
    # with non-ascii content
    magic="${rec:0:6}"
    check_magic

    ino2="${rec:6:8}"
    mode="${rec:14:8}"
    uid="${rec:22:8}"
    gid="${rec:30:8}"
    nlink="${rec:38:8}"
    mtime="0x${rec:46:8}"
    filesize="0x${rec:54:8}"
    devmajor="${rec:62:8}"
    devminor="${rec:70:8}"
    rdevmajor="${rec:78:8}"
    rdevminor="${rec:86:8}"
    namesize="0x${rec:94:8}"
    check="${rec:102:8}"


    # the old slow way - may switch back if substrings prove less robust in
    #  the face of weird input about 50% slower
 
    # dont bother getting header fields we dont need
    #get_chunk 0   6; magic=$get_chunk_return
    # validate magic immediately to minimize the possiblity of wierd failure with 
    # non-ascii content
    check_magic

    ##get_chunk 6   8; ino=$get_chunk_return
    #get_chunk 14  8; mode=$get_chunk_return
    #get_chunk 22  8; uid=$get_chunk_return
    #get_chunk 30  8; gid=$get_chunk_return
    ##get_chunk 38  8; nlink=$get_chunk_return
    #get_chunk 46  8; mtime=0x$get_chunk_return
    #get_chunk 54  8; filesize=0x$get_chunk_return
    ##get_chunk 62  8; devmajor=$get_chunk_return
    ##get_chunk 70  8; devmajor=$get_chunk_return
    ##get_chunk 78  8; rdevminor=$get_chunk_return
    ##get_chunk 86  8; rdevminor=$get_chunk_return
    #get_chunk 94  8;  namesize=0x$get_chunk_return
    ##get_chunk 102 8; check=$get_chunk_return



    get_chunk 110 $namesize; fname=$get_chunk_return

    #mask and convert to octal
    fileperm=$(printf "%o" "0x${mode:5}")
    #extract filetype section
    filetype=0x${mode:0:5}
}

#verifies that we read a supported record type
check_magic () {
    if [ "$magic" != "070701" ] && [ "$magic" != "070702" ] ; then
        echo "Invalid header - not a cpio archive?"
        echo "$magic"
        exit 1
    fi
    return 0
}

# everything to extract a file out of a cpio archive
#  as pointed at by $current_base
get_one_file () {
    local sb

    read_header 

    # only handle files and directories leaving a bunch of types 
    # that are just begging for implementation.  Their cries have
    # fallen on deaf ears, devices?  hardlinks?  symlinks? fifos?

    if  [ $fname = 'TRAILER!!!' ]; then
        #end of archive
        return 1
    fi

    case "$filetype" in
       8)
            extract_file "$namesize" "$fname" "$filesize" ;;
       4)
            extract_dir "$fname" ;;
       10)  echo "HARDLINK? $fname"
            ;;
       *)
            #should this be a fatal error?
            echo "Unsupported filetype: $filetype   for $fname"
    esac

    
    #giant PITA getting this padding right.
    #header + name + padding AND math in bash is a chore
    sb=$(( 110 + $namesize ))
    sb=$(( $sb + (( 4 - ( $sb % 4 )) % 4 ) ))

    # + file payload + padding
    sb=$(( $sb + $filesize ))
    sb=$(( $sb + (( 4 - ( $sb % 4 )) % 4 ) ))
  
    current_base="$current_base"+"$sb"
    
    return 0
}


cleanup () {
    if [ -n "$tmpfile" ]; then
        rm -f "$pkg"
    fi
}





trap cleanup EXIT
cmd_line "$1"

fin=0;
until [ "$fin" = 1 ]; do
    get_one_file
    fin="$?"
done


